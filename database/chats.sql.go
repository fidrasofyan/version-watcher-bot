// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: chats.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createChat = `-- name: CreateChat :one
INSERT INTO chats (id, command, step, data, created_at) 
VALUES ($1, $2, $3, $4, $5) 
RETURNING id, command, step, data, created_at, updated_at
`

type CreateChatParams struct {
	ID        int64
	Command   string
	Step      int16
	Data      []byte
	CreatedAt pgtype.Timestamp
}

func (q *Queries) CreateChat(ctx context.Context, arg *CreateChatParams) (*Chat, error) {
	row := q.db.QueryRow(ctx, createChat,
		arg.ID,
		arg.Command,
		arg.Step,
		arg.Data,
		arg.CreatedAt,
	)
	var i Chat
	err := row.Scan(
		&i.ID,
		&i.Command,
		&i.Step,
		&i.Data,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteChat = `-- name: DeleteChat :exec
DELETE FROM chats WHERE id = $1
`

func (q *Queries) DeleteChat(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteChat, id)
	return err
}

const getChat = `-- name: GetChat :one
SELECT id, command, step, data, created_at, updated_at FROM chats WHERE id = $1 LIMIT 1
`

func (q *Queries) GetChat(ctx context.Context, id int64) (*Chat, error) {
	row := q.db.QueryRow(ctx, getChat, id)
	var i Chat
	err := row.Scan(
		&i.ID,
		&i.Command,
		&i.Step,
		&i.Data,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const isChatExists = `-- name: IsChatExists :one
SELECT EXISTS(SELECT 1 FROM chats WHERE id = $1 LIMIT 1)
`

func (q *Queries) IsChatExists(ctx context.Context, id int64) (bool, error) {
	row := q.db.QueryRow(ctx, isChatExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const updateChat = `-- name: UpdateChat :one
UPDATE chats
SET command = $1, step = $2, data = $3, updated_at = $4
WHERE id = $5
RETURNING id, command, step, data, created_at, updated_at
`

type UpdateChatParams struct {
	Command   string
	Step      int16
	Data      []byte
	UpdatedAt pgtype.Timestamp
	ID        int64
}

func (q *Queries) UpdateChat(ctx context.Context, arg *UpdateChatParams) (*Chat, error) {
	row := q.db.QueryRow(ctx, updateChat,
		arg.Command,
		arg.Step,
		arg.Data,
		arg.UpdatedAt,
		arg.ID,
	)
	var i Chat
	err := row.Scan(
		&i.ID,
		&i.Command,
		&i.Step,
		&i.Data,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
