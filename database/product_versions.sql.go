// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: product_versions.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProductVersion = `-- name: CreateProductVersion :exec
INSERT INTO product_versions (
  product_id, 
  release_name, 
  release_codename,
  release_label,
  release_date,
  version,
  version_release_date,
  version_release_link,
  created_at
) 
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
ON CONFLICT (version, product_id) DO NOTHING
`

type CreateProductVersionParams struct {
	ProductID          int32
	ReleaseName        string
	ReleaseCodename    *string
	ReleaseLabel       string
	ReleaseDate        pgtype.Timestamp
	Version            *string
	VersionReleaseDate pgtype.Timestamp
	VersionReleaseLink *string
	CreatedAt          pgtype.Timestamp
}

func (q *Queries) CreateProductVersion(ctx context.Context, arg *CreateProductVersionParams) error {
	_, err := q.db.Exec(ctx, createProductVersion,
		arg.ProductID,
		arg.ReleaseName,
		arg.ReleaseCodename,
		arg.ReleaseLabel,
		arg.ReleaseDate,
		arg.Version,
		arg.VersionReleaseDate,
		arg.VersionReleaseLink,
		arg.CreatedAt,
	)
	return err
}

const getDistinctProductIdsFromProductVersionsByCreatedAt = `-- name: GetDistinctProductIdsFromProductVersionsByCreatedAt :many
SELECT DISTINCT product_id
FROM product_versions
WHERE created_at = $1
`

func (q *Queries) GetDistinctProductIdsFromProductVersionsByCreatedAt(ctx context.Context, createdAt pgtype.Timestamp) ([]int32, error) {
	rows, err := q.db.Query(ctx, getDistinctProductIdsFromProductVersionsByCreatedAt, createdAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int32{}
	for rows.Next() {
		var product_id int32
		if err := rows.Scan(&product_id); err != nil {
			return nil, err
		}
		items = append(items, product_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
